@page "/movies/{id}"
@inject NavigationManager NavigationManager
@inject IMovieService MovieService
@inject IToastService ToastService
@inject ICommentService CommentService
@inject IMovieState MovieState
@inject ICommentState CommentState
@implements IDisposable

<PageTitle>
    @if (IsLoading) {
        <span>Loading...</span>
    } else if (Movie == null) {
        <span>Movie not found</span>
    } else {
        @Movie.Title
    }
</PageTitle>

<AuthorizeView>
    <Authorized>
    @if (Movie != null && IsLoading == false)
    {
        <video style="max-height: 80vh;" controls="controls" autoplay="autoplay" width="100%">
            <source src="@Movie?.VideoUrl" type="video/mp4" />
            Your browser does not support the video tag.
        </video>

        <MovieDetails Movie="@Movie" />
        <hr />
        <section class="mt-2">
            <CommentInput Movie="@Movie" User="@User" />
        </section>
        
        <h2 class="mt-2 mb-2">Comments</h2>
        <hr />
        @if (IsCommentsLoading == true)
        {
            <div class="d-flex justify-content-center">
                <Loader ClassName="loader-big" />
            </div>
        }
        else
        {
            <CommentsSection MovieId="@id" Comments="@CommentState.Comments" />
        }
    } 

    @if (IsLoading == true)
    {
        <div class="d-flex justify-content-center">
            <Loader ClassName="loader-big" />
        </div>
    }

    @if (IsLoading == false && Movie == null)
    {
        <div class="d-flex justify-content-center gap-2">
            <h1>Movie not found</h1>
            <button class="btn btn-primary" @onclick="GoBack">Go back</button>
        </div>
    }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to see this page</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    Movie? Movie;
    [Parameter]
    public string? id { get; set; }
    bool IsLoading { get; set; } = true;
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    User User { get; set; }
    bool IsCommentsLoading { get; set; } = true;

    void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    async Task HandleMovie() {
        if (id != null && MongoDB.Bson.ObjectId.TryParse(id, out _)) {
            Movie = await MovieService.GetMovieById(id);
            await MovieService.AddView(Movie);
        } else {
            ToastService.ShowError("Movie not found (invalid id)");
        }
    }

    async Task HandleUser() {
        if (authenticationState != null) {
            var authState = await authenticationState;
            User = new User(authState);
        }
    }

    async Task HandleComment() {
        if (id != null && MongoDB.Bson.ObjectId.TryParse(id, out _)) {
            try {
                CommentState.Comments = await CommentService.GetComments(new MongoDB.Bson.ObjectId(id));
            } catch (Exception) {
                ToastService.ShowError("Problem with loading comments");
            }
            finally {
                IsCommentsLoading = false;
            }
        }   
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CommentState.OnChange += StateHasChanged;
    }

    void IDisposable.Dispose()
    {
        CommentState.OnChange -= StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            
            IsLoading = true; 
            await HandleUser();
            await HandleMovie();
            await HandleComment();
        }
        catch (Exception)
        {
            ToastService.ShowError("Problem with loading movie");
        }
        finally
        {
            IsLoading = false;
        }
    }
}