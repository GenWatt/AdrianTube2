@page "/shorts"
@using AdrianTube2.Models.Movie
@using AdrianTube2.state

@inject MovieService MovieService
@inject LikeService LikeService
@inject IToastService ToastService
@inject ShortsState ShortsState
@inject IJSRuntime JSRuntime

<PageTitle>Shorts</PageTitle>

<ul class="shorts-container"> 
    @foreach (var shortVideo in ShortsState.Shorts)
    {
        <li class="mx-auto" style="height: calc(100vh - 56px);">
            <video id="@shortVideo.Id" preload="metadata" controls poster="@shortVideo.Thumbnail">
                <source src="@shortVideo.VideoUrl" type="video/mp4" />
            </video>
            <h2>@shortVideo.Title</h2>
            <div class="d-flex gap-2 justify-content-between">
                <div class="d-flex gap-2">
                    <img class="avatar" src="@shortVideo.User.ProfilePicture" alt="avatar">
                    <h3>@shortVideo.User.Username</h3>
                </div>
                <div class="d-flex gap-2">
                    <LikeButton LikesCount="@Likes" />
                    <DisLikeButton DislikesCount="@Dislikes" />
                </div>
            </div>

        </li>
    }
</ul>

@code {
    int Likes { get; set; } = 0;
    int Dislikes { get; set; } = 0;
    int Views { get; set; } = 0;
    Movie? CurrentVideo { get; set; }

    async Task GetVideoData (MongoDB.Bson.ObjectId id) {
        Likes = await LikeService.GetMovieLikes(id);
        Dislikes = await LikeService.GetMovieDislikes(id);
        Views = await MovieService.GetViewsCount(id);
    }
    protected override async Task OnInitializedAsync()
    {
        @* try { *@
            ShortsState.OnChange += StateHasChanged;
            ShortsState.Shorts = await MovieService.GetShorts();
            CurrentVideo = ShortsState.Shorts.FirstOrDefault();

            if (CurrentVideo is not null) {
                await GetVideoData(CurrentVideo.Id);
            }
        @* } catch (Exception) {
            ToastService.ShowError("Something went wrong with fetching short data");
        } *@
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (CurrentVideo is not null) {
            await JSRuntime.InvokeVoidAsync("setMediaPlayer", CurrentVideo.Id.ToString());
            await JSRuntime.InvokeVoidAsync("mediaPlayer.play");
        }
    
    }
}