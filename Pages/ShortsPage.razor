@page "/shorts"

@inject IMovieService MovieService
@inject ILikeService LikeService
@inject IToastService ToastService
@inject IShortsState ShortsState
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Shorts</PageTitle>

<ul class="shorts-container"> 
    @if (IsLoading)
    {
        <Loader />
    } else {
        <AuthorizeView>
            <Authorized>
                @foreach (var shortVideo in ShortsState.Shorts)
                {   
                    <Short ShortVideo="shortVideo" />
                }
            </Authorized>
            <NotAuthorized>
                <p>You are not authorized to see this content.</p>
            </NotAuthorized>
        </AuthorizeView>
    }
</ul>

@code {
    DotNetObjectReference<ShortsPage>? dotNetHelper;
    bool IsLoading { get; set; } = false;
    Movie? PreviousShort { get; set; }
    bool wasPlayed { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        try {
            IsLoading = true;
            ShortsState.OnChange += StateHasChanged;
            ShortsState.Shorts = await MovieService.GetShorts();
            ShortsState.CurrentShort = ShortsState.Shorts.FirstOrDefault();
            IsLoading = false;
        } catch (Exception) {
            ToastService.ShowError("Something went wrong with fetching short data");
        }
    }

    [JSInvokable]
    public async Task ScrollDownHandler()
    {
        if (ShortsState.CurrentShort is not null)
        {
            await JSRuntime.InvokeVoidAsync("mediaPlayer.pause");
            var nextShort = await ShortsState.NextShort();

            if (nextShort is not null) {
                await AddView(nextShort);
                await PlayShort(nextShort);
            } else {
                ToastService.ShowInfo("No more shorts");
            }
        }
    }

    [JSInvokable]
    public string? GetCurrentShortId()
    {
        return ShortsState.CurrentShort?.Id.ToString();
    }

    [JSInvokable]
    public async Task ScrollUpHandler()
    {
        if (ShortsState.CurrentShort is not null)
        {
            await JSRuntime.InvokeVoidAsync("mediaPlayer.pause");
            var previousShort = ShortsState.PreviousShort();

            if (previousShort is not null) {
                await AddView(previousShort);
                await PlayShort(previousShort);
            } 
        }
    }

    async Task AddView(Movie shortVideo) {
        try {
            await MovieService.AddView(shortVideo);
        }
        catch (Exception) {
            Console.WriteLine("Something went wrong with adding view");
        }
    }

    async Task PlayShort(Movie? shortVideo)
    {        
        try {
            if (shortVideo is not null) {
                await JSRuntime.InvokeVoidAsync("setMediaPlayer", shortVideo.Id.ToString());
                await JSRuntime.InvokeVoidAsync("mediaPlayer.play");
            }
        } catch (Exception) {
            ToastService.ShowError("Something went wrong with playing short");
         }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ShortsState.CurrentShort is not null && ShortsState.CurrentShort != PreviousShort)
        {
            PreviousShort = ShortsState.CurrentShort;
            await AddView(ShortsState.CurrentShort);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setShortEvents", "main-container", dotNetHelper);
            await JSRuntime.InvokeVoidAsync("disableScroll", "main-container"); 
        }

        await PlayShort(ShortsState.CurrentShort);
    }

    public async void Dispose()
    {
        ShortsState.OnChange -= StateHasChanged;
        ShortsState.ResetShortes();
        await JSRuntime.InvokeVoidAsync("enableScroll", "main-container");
        await JSRuntime.InvokeVoidAsync("removeShortsEvents", "main-container");
        dotNetHelper?.Dispose();
    }
}