@page "/movies"

@inject IJSRuntime JSRuntime
@inject IMovieService _movieService
@inject IToastService _toastService
@inject IMovieState MovieState

<PageTitle>AdrianTube2 - Movies</PageTitle>

<AuthorizeView>
  <Authorized>
    <SearchMovie ContainerClass="d-sm-none d-xs-block mb-4"  />
    <div id="movieList">
      <MovieList Movies="@MovieState.Movies" />
      @if (IsLoading)
      {
        <div class="d-flex justify-content-center">
            <Loader ClassName="loader-big" />
        </div>
      }
    </div>
  </Authorized>

  <NotAuthorized>
    <p>You're not authorized to view this page. Redirecting to log in page.</p>
  </NotAuthorized>
</AuthorizeView>

@code {
  bool IsLoading { get; set; } = false;
  bool IsLoadingMore { get; set; } = true;
  DotNetObjectReference<Index>? dotNetHelper;
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
        dotNetHelper = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("ScrollHelper.setDotNetHelper", dotNetHelper);
        await JSRuntime.InvokeVoidAsync("ScrollHelper.onScroll");
    }
  }
  protected override async Task OnInitializedAsync()
  {
      var movie = await GetMovies();

      if (movie == null) {
        return;
      }

      MovieState.Movies = movie;
      base.OnInitialized();
  }

  private async Task<List<Movie?>> GetMovies() {
      try {
          IsLoading = true;
          var movies = await _movieService.GetMovies(MovieState.MoviePage);
          return movies;
      } catch (Exception) {
          _toastService.ShowError("Unable to retrieve movies.");
          return null;
      } finally {
          IsLoading = false;
      }
  }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        MovieState.OnChange += StateHasChanged;
    }

    public async void Dispose()
    {
        MovieState.OnChange -= StateHasChanged;
        await JSRuntime.InvokeVoidAsync("ScrollHelper.offScroll");
    }

    [JSInvokable]
    public async Task LoadMore()
    {
        if (!IsLoadingMore || IsLoading) return; 
        var scrollHeight = await JSRuntime.InvokeAsync<int>("getWindowScrollHeight");
        var scrollTop = await JSRuntime.InvokeAsync<int>("getWindowScrollTop");
        var clientHeight = await JSRuntime.InvokeAsync<int>("getWindowHeight");
        var elementOffsetTop = await JSRuntime.InvokeAsync<int>("getElementOffsetTop", "movieList");
        
        if (scrollHeight - scrollTop - clientHeight - elementOffsetTop <= 200)
        {
            MovieState.NextMoviePage();
            var movies = await GetMovies();

            if (movies == null) {
                return;
            }

            if (movies.Count == 0) {
                IsLoadingMore = false;
                return;
            }

            MovieState.AddMovies(movies);
        }
    }
}
