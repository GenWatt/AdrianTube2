@page "/user/{id}"
@using AdrianTube2.Models.UserModels
@using AdrianTube2.Models.Movie
@inject UserService UserService
@inject IToastService ToastService
@inject MovieService MovieService

<PageTitle>
    @if (IsLoading) {
        <Loader ClassName="loader-big" />
    } else if (User != null) {
        @User.Username
    } else {
        <span>User not found.</span>
    }
</PageTitle>

<section>
    @if (IsLoading) {
        <div class="w-100 d-flex justify-content-center">
            <Loader />
        </div>
    } 

    @if (User == null && !IsLoading) {
        <p>User not found.</p>
    }

    @if (User != null && !IsLoading) {
        <AuthorizeView>
            <Authorized>
                <section>
                    <div class="d-flex align-items-center gap-3" style="font-size: 24px;">
                        @if (@User.CoverPicture == null) {
                            <div>
                                <img src="@User.CoverPicture" alt="@User.Username cover picture" />
                                @User.CoverPicture
                            </div>
                        }
                        <img class="avatar" src="@User.ProfilePicture" alt="@User.Username" />
                        <h1>@User.Username</h1>
                    </div>
                    <div class="mt-3">
                        <h2>@User.Username's videos</h2>
                        <MovieList Movies="@Movies" />
                        @if (Movies.Count == 0) {
                            <p>@User.Username has no videos.</p>
                        } else {
                            <LoadMoreButton Name="Movies" OnClick="@LoadMoreMovies" IsLoading="@IsLoadingMoreMovies" IsMoreToLoad="@IsMoreMovies" />                            
                        }
                    </div>
                    <div class="mt-3 mb-3">
                        <h2>@User.Username's shorts</h2>
                        <MovieList Movies="@Shorts" />
                        @if (Shorts.Count == 0) {
                            <p>@User.Username has no shorts.</p>
                        } else {
                            <LoadMoreButton Name="Shorts" OnClick="@LoadMoreShorts" IsLoading="@IsLoadingMoreShorts" IsMoreToLoad="@IsMoreShorts" />
                        }
                    </div>
                </section>
            </Authorized>
            <NotAuthorized>
                <p>You are not authorized to view this page.</p>
            </NotAuthorized>
        </AuthorizeView>
    }
</section>

@code {
    [Parameter]
    public string? Id { get; set; }
    public string? PreviousId { get; set; }
    User? User { get; set; }
    List<Movie> Movies { get; set; } = new ();
    List<Movie> Shorts { get; set; } = new ();
    bool IsLoading { get; set; } = false;
    bool IsLoadingMoreMovies { get; set; } = false;
    bool IsMoreMovies { get; set; } = true;
    bool IsLoadingMoreShorts { get; set; } = false;
    bool IsMoreShorts { get; set; } = true;
    int MoviePageNumber { get; set; } = 1;  
    int ShortPageNumber { get; set; } = 1;

    async Task LoadMoreMovies() {
        if (User == null) return;
        try {
            IsLoadingMoreMovies = true;
            var moreMovies = await MovieService.GetMoviesByUserId(User.Id.ToString(), MoviePageNumber);
            MoviePageNumber = MoviePageNumber + 1;

            if (moreMovies.Count > 0) {
                Movies.AddRange(moreMovies);
                StateHasChanged();
                return;
            }

            IsMoreMovies = false;
        } catch (Exception) {
            ToastService.ShowError("Problem with fetching movies.");
        } finally {
            IsLoadingMoreMovies = false;
        }
    }

    async Task LoadMoreShorts() {
        if (User == null) return;
        try {
            IsLoadingMoreShorts = true;
            var moreShorts = await MovieService.GetShortsByUserId(User.Id.ToString(), ShortPageNumber);
            ShortPageNumber++;

            if (moreShorts.Count > 0) {
                Shorts.AddRange(moreShorts);
                StateHasChanged();
                return;
            }

            IsMoreShorts = false;
        } catch (Exception) {
            ToastService.ShowError("Problem with fetching shorts.");
        } finally {
            IsLoadingMoreShorts = false;
        }
    }

    async Task LoadUser() {
        if (MongoDB.Bson.ObjectId.TryParse(Id, out MongoDB.Bson.ObjectId objId)) {
            User = await UserService.GetUser(objId);
        }
    }

    async Task LoadData() {
        if (User != null) {
            await LoadMoreMovies();
            await LoadMoreShorts();
        }
    }

    async Task LoadAll() {
        try {
            IsLoading = true;
            await LoadUser();
            await LoadData();
        } catch (Exception) {
            ToastService.ShowError("Problem with fetching user.");
        } finally {
            IsLoading = false;
        }
    }

    void Reset() {
        Movies.Clear();
        Shorts.Clear();
        IsMoreMovies = true;
        IsMoreShorts = true;
        MoviePageNumber = 1;
        ShortPageNumber = 1;
    }

    // on parameter change
    protected override async Task OnParametersSetAsync()
    {
        if (Id != PreviousId) {
            PreviousId = Id;
            Reset();

            await LoadAll();
        }
    }
}