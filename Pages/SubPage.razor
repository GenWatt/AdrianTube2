@page "/subs/{id}"

@inject IUserService UserService
@inject IToastService ToastService
@inject IMovieService MovieService
@inject ISubscriptionService SubscriptionService
@inject ISubscriptionState SubscriptionState

<PageTitle>
    @if (IsLoading) {
        <Loader />
    } else if (User != null) {
        @User.Username
    } else {
        <span>User not found.</span>
    }
</PageTitle>

<section>
    @if (IsLoading) {
        <div class="w-100 d-flex justify-content-center">
            <Loader ClassName="loader-big" />
        </div>
    } 

    @if (User == null && !IsLoading) {
        <p>User not found.</p>
    }

    @if (User != null && !IsLoading) {
        <AuthorizeView>
            <Authorized>
                <div class="container mb-2">
                    <div class="d-flex align-items-center gap-3 position-relative" style="font-size: 24px;">
                        <CoverPicture User="@User" />
                        <div class="d-flex justify-content-between w-100 p-2 flex-wrap gap-2">
                            <Avatar User="@User" />
                            <div>
                                <SubscribeMovie User="@User" />
                            </div>
                        </div>
                    </div>
                    <SubSection Title="Videos" User="@User" IsLoadingMoreMovies="@IsLoadingMoreMovies" IsMoreMovies="@IsMoreMovies" Movies="@Movies" LoadMoreMovies="@LoadMoreMovies" />
                </div>
            </Authorized>
            <NotAuthorized>
                <p>You are not authorized to view this page.</p>
            </NotAuthorized>
        </AuthorizeView>
    }
</section>

@code {
    [Parameter]
    public string? Id { get; set; }
    public string? PreviousId { get; set; }
    User? User { get; set; }
    List<Movie> Movies { get; set; } = new ();
    bool IsLoading { get; set; } = false;
    bool IsLoadingMoreMovies { get; set; } = false;
    bool IsMoreMovies { get; set; } = true;
    int MoviePageNumber { get; set; } = 1;  

    async Task LoadMoreMovies() {
        if (User == null) return;
        try {
            IsLoadingMoreMovies = true;
            var moreMovies = await MovieService.GetMoviesByUserId(User.Id.ToString(), MoviePageNumber);
            MoviePageNumber = MoviePageNumber + 1;

            if (moreMovies.Count > 0) {
                Movies.AddRange(moreMovies);
                StateHasChanged();
                return;
            }

            IsMoreMovies = false;
        } catch (Exception) {
            ToastService.ShowError("Problem with fetching movies.");
        } finally {
            IsLoadingMoreMovies = false;
        }
    }

    async Task LoadUser() {
        if (MongoDB.Bson.ObjectId.TryParse(Id, out MongoDB.Bson.ObjectId objId)) {
            User = await UserService.GetUser(objId);
        }
    }

    async Task LoadData() {
        if (User != null) {
            await LoadMoreMovies();
        }
    }

    async Task LoadAll() {
        try {
            IsLoading = true;
            await LoadUser();
            await LoadData();
        } catch (Exception) {
            ToastService.ShowError("Problem with fetching user.");
        } finally {
            IsLoading = false;
        }
    }

    void Reset() {
        Movies.Clear();
        IsMoreMovies = true;
        MoviePageNumber = 1;
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id != PreviousId) {
            PreviousId = Id;
            Reset();

            await LoadAll();
        }
    }
}