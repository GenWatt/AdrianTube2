@using System.Linq.Expressions
@using AdrianTube2.Services

@inject FileService _fileService

<div class="form-group mt-2">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@_id" class="form-label">@Label</label>
    }
    <InputFile @key="_key" id="_id" type="file" @attributes="@AdditionalAttributes" class="form-control" OnChange="HandleChange" />

    @if (MaxSize != null && MaxSize > 0)
    {
        <div>
            <small class="text-muted">Max size: @MaxSizeString</small>
        </div>
    }

    @if (AllowedExtensions.Length > 0)
    {
        <div>
            <small class="text-muted">Allowed extensions: @string.Join(", ", AllowedExtensions)</small>
        </div>
    }

    <div>
        @if (File != null && ShowFileParameters)
        {
            <div class="mt-2">
                <div class="d-flex justify-content-between">
                    <small class="text-muted">Filename</small>
                    <small class="text-muted">@File.Name</small>
                </div>
                <div class="d-flex justify-content-between">
                    <small class="text-muted">Size</small>
                    <small class="text-muted">@FileSize</small>
                </div>
            </div>
        }
    </div>
    <div class="mt-1">
        @if (!string.IsNullOrEmpty(ErrorMessage)) {
            <small class="validation-message" role="alert">@ErrorMessage</small>
        }
    </div>
</div>

@code {
    private string _id = Guid.NewGuid().ToString();
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, object>();
    [Parameter] public string Label { get; set; }
    [Parameter] public bool ShowFileParameters { get; set; }
    [Parameter] public EventCallback<IBrowserFile> OnChange { get; set; }
    [Parameter] public double MaxSize { get; set; }
    [Parameter] public string[] AllowedExtensions { get; set; } = new string[] {};
    private string ErrorMessage { get; set; }
    private IBrowserFile? File { get; set; }
    private string _key = Guid.NewGuid().ToString();
    private string FileSize => $"{_fileService.ConvertSizeToUnit(File.Size, "MB")}MB";
    private string? MaxSizeString => MaxSize != null ? $"{_fileService.ConvertSizeToUnit(MaxSize, "MB")}MB" : null;

    private bool Validate(IBrowserFile file) {
        if (file == null) {
            ErrorMessage = "File is required.";
            return false;
        }

        if (MaxSize > 0 && file.Size > MaxSize) { 
            ErrorMessage = $"File size is too large. Max size is {_fileService.ConvertSizeToUnit(file.Size, "MB")}MB.";
            return false;
        }

        if (AllowedExtensions.Length > 0 && !AllowedExtensions.Contains(Path.GetExtension(file.Name))) {
            ErrorMessage = $"File extension is not allowed. Allowed extensions are {string.Join(", ", AllowedExtensions)}.";
            return false;
        }

        return true;
    }

    protected override void OnParametersSet()
    {
        if (AllowedExtensions.Length == 0 || AdditionalAttributes.ContainsKey("accept")) {
            return;
        }

        var acceptString = string.Join(",", AllowedExtensions.Select(e => $"{e}"));

        AdditionalAttributes.Add("accept", acceptString);
    }

    private async Task HandleChange(InputFileChangeEventArgs  e)
    {
        File = e.File;

        if (!Validate(File)) {
            File = null;
        }

        await OnChange.InvokeAsync(File);
    }

    public void Reset() {
        File = null;
        _key = Guid.NewGuid().ToString();
    }
}