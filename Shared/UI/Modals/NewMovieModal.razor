@inject IMovieService MovieService
@inject IToastService ToastService
@inject IFileService FileService
@inject IMovieState MovieState
@inject IShortsState ShortsState
@inject IJSRuntime JSRuntime

@if (IsShow) {
    <Modal IsShow="@IsShow">
        <div class="modal-content">
            <div class="modal-header">
                @if (IsEdit) {
                    <h5 class="modal-title">Edit movie!</h5>
                } else {
                    <h5 class="modal-title">Create new movie!</h5>
                }
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Close"></button>
            </div>
            <EditForm Model="@MovieViewModel" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <Input placeholder="Fancy title" @bind-Value="@MovieViewModel.Title" Label="Title" ValidationFor="@(() => MovieViewModel.Title)" />   
                    <TextArea Label="Description" placeholder="Best every movie" @bind-Value="@MovieViewModel.Description" />
                    <CustomFileInput @ref="imageRef" OnChange="HandleThumbnailChange" AllowedExtensions="@AllowedImageExtensions" MaxSize="@ImageMaxSize" Label="Thumbnail" />
                    @if (!string.IsNullOrEmpty(MovieViewModel.ThumbnailUrl)) {
                        <div>
                            <img class="w-100 rounded" style="height: 12rem" src="@MovieViewModel.ThumbnailUrl" alt="thumbnail" />
                        </div>
                    }
                    <CustomFileInput @ref="videoRef" OnChange="HandleVideoChange" ShowFileParameters="@(true)" AllowedExtensions="@AllowedVideoExtensions" MaxSize="@VideoMaxSize" Label="Video" />
                    @if (MovieViewModel.Video != null && isProgress) {
                        <Progressbar Value="@progressPercentage" />
                    }
                    @if (!string.IsNullOrEmpty(MovieViewModel.VideoUrl)) {
                        <div class="mt-2">
                            <video id="videoPreview" class="w-100" controls>
                                <source src="@MovieViewModel.VideoUrl" type="video/mp4" />
                            </video>
                        </div>
                    }
                    @if (!IsEdit) {
                        <Checkbox Label="Is video short?" @bind-Value="@MovieViewModel.IsShort" Tooltip="Short is video with aspect ratio between 9/16 and 9/19 and less than 60 seconds duration"/>
                    }
                    @if (IsEdit) {
                        @if (MovieViewModel.IsShort) {
                            <p class="text-muted">This is short</p>
                        } else {
                            <p class="text-muted">This is movie</p>
                        }
                    }
                </div> 
                <div class="modal-footer">
                    <Button type="submit" disabled="@IsLoading">
                        @if (IsLoading) {
                            <Loader />
                        }
                        else {
                            <span>Upload</span>
                        }
                    </Button>
                    <Button type="button" Variant="Button.ButtonVariant.Danger" data-bs-dismiss="modal" @onclick="Close">Cancel</Button>
                </div>
            </EditForm>
        </div>
    </Modal>
}

@code {
    [Parameter] public bool IsShow { get; set; }
    [Parameter] public EventCallback<bool> IsShowMovieModalChanged { get; set; }
    [Parameter] public MovieViewModel MovieViewModel { get; set; } = new MovieViewModel();
    [Parameter] public bool IsEdit { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private string[] AllowedVideoExtensions = new string[] { ".mp4" };
    private string[] AllowedImageExtensions = new string[] { ".jpg", ".png", ".jpeg" };
    private double VideoMaxSize = Constants.MaxVideoSize;
    private double ImageMaxSize = Constants.MaxThumbnailSize;
    private CustomFileInput videoRef;
    private CustomFileInput imageRef;
    private double progressPercentage = 0;
    private bool isProgress = false;

    public async void Close ()
    {
        IsShow = false;
        MovieViewModel = new MovieViewModel();
        videoRef.Reset();
        imageRef.Reset();
        StateHasChanged();
        await IsShowMovieModalChanged.InvokeAsync(false);
    }

    public async Task AddMovie() {
        var movie = await MovieService.AddMovie(MovieViewModel);

        if (MovieViewModel.IsShort) {
            ShortsState.AddShort(movie);
            ToastService.ShowSuccess("Short added successfully!");
            return;
        }
        MovieState.AddMovie(movie);
        ToastService.ShowSuccess("Movie added successfully!");
    }

    public async Task EditMovie() {
        var updatedMovie = await MovieService.UpdateMovie(MovieViewModel);
        
        if (MovieViewModel.IsShort) {
            ShortsState.UpdateShort(updatedMovie);
            ToastService.ShowSuccess("Short updated successfully!");
            return;
        }
        MovieState.UpdateMovie(updatedMovie);
        ToastService.ShowSuccess("Movie updated successfully!");
    }
 
    public async Task HandleSubmit()
    {
        try { 
            if (MovieViewModel.Video != null || MovieViewModel.VideoUrl != null) {
                IsLoading = true;
                if (IsEdit) {
                    await EditMovie();
                } else {
                    await AddMovie();
                }
                Close();
            } else {
                ToastService.ShowError("Please select a video and Thumbnail");
            }
        } catch (Exception e) {
            ToastService.ShowError(e.Message);
        } finally {
            IsLoading = false;
        }
    }

    private async Task HandleVideoChange(IBrowserFile file)
    {
        try {
            if (file == null) {
                MovieViewModel.Video = null;
                MovieViewModel.VideoUrl = "";
                progressPercentage = 0;
                StateHasChanged();
                return;
            };

            MovieViewModel.Video = file; 
            await HandleProgressbar(file); 

            MovieViewModel.VideoUrl = await FileService.CreateVideoUrl(file);

            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("loadVideo", "videoPreview");
        } catch (Exception) {
            ToastService.ShowError("Error while uploading video");
        }
    }

    private async Task HandleProgressbar(IBrowserFile file) {
        using (var stream = file.OpenReadStream(maxAllowedSize: (long)VideoMaxSize))
        {
            var totalBytes = stream.Length;
            var bufferSize = (int)VideoMaxSize;
            var buffer = new byte[bufferSize];
            var bytesRead = 0L;
            var bytesWritten = 0L;

            isProgress = true;

            while ((bytesRead = await stream.ReadAsync(buffer, 0, bufferSize)) > 0)
            {
                bytesWritten += bytesRead;
                progressPercentage = (double)bytesWritten / totalBytes * 100;
                StateHasChanged();
            }

            isProgress = false;
            progressPercentage = 0;
        }
    }

    private async void HandleThumbnailChange(IBrowserFile file)
    {
        try {
            if (file == null) return;

            MovieViewModel.Thumbnail = file;
            MovieViewModel.ThumbnailUrl = await FileService.CreateImageUrl(file);
            StateHasChanged();
        } catch (Exception) {
            ToastService.ShowError("Error while uploading image");
        }
    }
}
