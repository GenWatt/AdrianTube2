@using AdrianTube2.ViewModels
@using AdrianTube2.Services
@using AdrianTube2.state

@inject MovieService _movieService
@inject IToastService _toastService
@inject FileService _fileService
@inject StateContainer StateContainer

@if (IsShow) {
    <Modal IsShow="@IsShow">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create new movie!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Close"></button>
            </div>
            <EditForm Model="@MovieViewModel" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <Input placeholder="Fancy title" @bind-Value="@MovieViewModel.Title" Label="Title" ValidationFor="@(() => MovieViewModel.Title)" />   
                    <TextArea Label="Description" placeholder="Best every movie" @bind-Value="@MovieViewModel.Description" />
                    <CustomFileInput @ref="imageRef" OnChange="HandleThumbnailChange" AllowedExtensions="@AllowedImageExtensions" MaxSize="@ImageMaxSize" Label="Thumbnail" />
                    @if (!string.IsNullOrEmpty(ThumbnailUrl)) {
                        <div>
                            <img class="w-100 rounded" style="height: 12rem" src="@ThumbnailUrl" alt="thumbnail" />
                        </div>
                    }
                    <CustomFileInput @ref="videoRef" OnChange="HandleVideoChange" ShowFileParameters="@(true)" AllowedExtensions="@AllowedVideoExtensions" MaxSize="@VideoMaxSize" Label="Video" />
                    @if (MovieViewModel.Video != null) {
                        <Progressbar Value="@progressPercentage" />
                    }
                </div> 
                <div class="modal-footer">
                    <Button type="submit" disabled="@IsLoading">
                        @if (IsLoading) {
                            <Loader />
                        }
                        else {
                            <span>Upload</span>
                        }
                    </Button>
                    <Button type="button" Variant="Button.ButtonVariant.Danger" data-bs-dismiss="modal" @onclick="Close">Cancel</Button>
                </div>
            </EditForm>
        </div>
    </Modal>
}

@code {
    [Parameter] public bool IsShow { get; set; }
    [Parameter] public EventCallback<bool> IsShowMovieModalChanged { get; set; }
    public MovieViewModel MovieViewModel = new MovieViewModel();
    private bool IsLoading { get; set; } = false;
    private string[] AllowedVideoExtensions = new string[] { ".mp4" };
    private string[] AllowedImageExtensions = new string[] { ".jpg", ".png", ".jpeg" };
    private double VideoMaxSize = Constants.MaxVideoSize;
    private double ImageMaxSize = Constants.MaxThumbnailSize;
    private CustomFileInput videoRef;
    private CustomFileInput imageRef;
    private double progressPercentage = 0;

    private string? ThumbnailUrl { get; set; } = null;

    public void Close ()
    {
        IsShow = false;
        ThumbnailUrl = null;
        MovieViewModel = new MovieViewModel();
        videoRef.Reset();
        imageRef.Reset();
        StateHasChanged();
    }

    public async void HandleSubmit()
    {
        try { 
            if (MovieViewModel.Video != null) {
                IsLoading = true;
                var movie = await _movieService.AddMovie(MovieViewModel);
                StateContainer.AddMovie(movie);
                _toastService.ShowSuccess("Movie added successfully!");
            } else {
                _toastService.ShowError("Please select a video");
            }
        } catch (Exception e) {
            _toastService.ShowError(e.Message);
        } finally {
            IsLoading = false;
        }

        await IsShowMovieModalChanged.InvokeAsync(false);
        Close();
    }

    private void HandleVideoChange(IBrowserFile file)
    {
        if (file == null) {
            MovieViewModel.Video = null;
            progressPercentage = 0;
            StateHasChanged();
            return;
        };

        MovieViewModel.Video = file;
        HandleProgressbar(file);  
        StateHasChanged();
    }

    private async void HandleProgressbar(IBrowserFile file) {
        try {
            using (var stream = file.OpenReadStream(maxAllowedSize: (long)VideoMaxSize))
            {
                var totalBytes = stream.Length;
                var bufferSize = 4096;
                var buffer = new byte[bufferSize];
                var bytesRead = 0L;
                var bytesWritten = 0L;

                while ((bytesRead = await stream.ReadAsync(buffer, 0, bufferSize)) > 0)
                {
                    bytesWritten += bytesRead;
                    progressPercentage = (double)bytesWritten / totalBytes * 100;
                    StateHasChanged();
                }
            }
        }
        catch (Exception) {
            _toastService.ShowError("Error while uploading video");
        }
    }

    private async void HandleThumbnailChange(IBrowserFile file)
    {
        try {
            if (file == null) return;

            MovieViewModel.Thumbnail = file;
            ThumbnailUrl = await _fileService.CreateImageUrl(file);
            StateHasChanged();
        } catch (Exception) {
            _toastService.ShowError("Error while uploading image");
        }
    }
}
