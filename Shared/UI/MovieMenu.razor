@using AdrianTube2.Models.Movie
@using AdrianTube2.Services
@using AdrianTube2.state
@inject MovieService MovieService
@inject IToastService ToastService
@inject StateContainer StateContainer

<Menu @ref="@menu">
    <li><a class="dropdown-item" href="movie/@Movie.Id">Watch</a></li>
    @if (Movie.UserId.ToString() == CurrentUserId)
    {
        <li><a class="dropdown-item" @onclick="EditMovie">Edit</a></li>
        <li><a class="dropdown-item" @onclick="DeleteMovie">Delete</a></li>
    }
</Menu>

@code {
    [Parameter] public Movie Movie { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    public string CurrentUserId { get; set; } = "";
    private Menu menu;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (user != null && user.Identity.IsAuthenticated)
        {
            CurrentUserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }
    }

    public async Task DeleteMovie()
    {   
        try {
            await MovieService.DeleteMovie(Movie.Id);
            StateContainer.RemoveMovie(Movie);
            ToastService.ShowSuccess($"Movie \"{Movie.Title}\" deleted");
            menu.ToogleMenu();
        } catch (Exception) {
            ToastService.ShowError("Problem with deleting movie");
        }
    }

    public void EditMovie()
    {
        // TODO: Edit movie
    }


}
