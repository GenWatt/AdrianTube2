@inject ICommentService CommentService
@inject IJSRuntime JSRuntime
@inject ICommentState CommentState
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@implements IDisposable

<section>
    @if (Comments.Count == 0)
    {
        <div class="d-flex justify-content-center">
            <h2>No comments yet.</h2>
        </div>
    }
    else
    {
        <ul id="commentList">
            @foreach (var comment in Comments)
            {
                <CommentSection Comment="comment" />
            }
        </ul> 

        @if (IsLoading) {
            <div class="d-flex justify-content-center">
                <Loader ClassName="loader-big" />
            </div>
        }

        @if (!IsLoadingMore) {
            <h3>There is no more comments!</h3>
        }
    }
</section>

@code {
    [Parameter] public string? MovieId { get; set; }
    [Parameter] public List<Comment>? Comments { get; set; } = new ();
    bool IsLoadingMore { get; set; } = true;
    bool IsLoading { get; set; } = false;
    DotNetObjectReference<CommentsSection>? dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("ScrollHelper.setDotNetHelper", dotNetHelper);
            await JSRuntime.InvokeVoidAsync("ScrollHelper.onScroll");
        }
    }

    [JSInvokable]
    public async Task LoadMore()
    {
        try {
            if (!IsLoadingMore) {
                IsLoading = false;
                return;
            }

            if (IsLoading) {
                return;
            }
            
            IsLoading = true;
            var scrollHeight = await JSRuntime.InvokeAsync<int>("getWindowScrollHeight");
            var scrollTop = await JSRuntime.InvokeAsync<int>("getWindowScrollTop");
            var clientHeight = await JSRuntime.InvokeAsync<int>("getWindowHeight");
            var elementOffsetTop = await JSRuntime.InvokeAsync<int>("getElementOffsetTop", "commentList");

            if (scrollHeight - scrollTop - clientHeight - elementOffsetTop <= 200)
            {
                CommentState.NextCommentPage();
                var comments = await CommentService.GetComments(new MongoDB.Bson.ObjectId(MovieId), CommentState.CommentPage);

                if (comments == null) {
                    return;
                }

                if (comments.Count == 0) {
                    IsLoadingMore = false;
                    return;
                }

                CommentState.AddComments(comments);
            }
        } 
        catch (JSException) {
            IsLoadingMore = false;
        }
        catch (Exception) {
            ToastService.ShowError("Error loading comments");
        } 
        finally {
            IsLoading = false;
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }
}