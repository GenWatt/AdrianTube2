@using AdrianTube2.Models.Movie
@inject ISubscriptionService SubscriptionService
@inject IToastService ToastService
@inject ISubscriptionState SubscriptionState

@implements IDisposable

<div>
  <nav class="container flex-column">
    <div class="nav-item">
      <NavLink class="nav-link p-2" href="/movies">
        <span class="oi oi-video" aria-hidden="true"></span> Movies
      </NavLink>
    </div>
    <div class="nav-item">
      <NavLink class="nav-link p-2" href="shorts">
        <span class="oi oi-play-circle" aria-hidden="true"></span> Shorts
      </NavLink>
    </div> 
  </nav>
  <h4 class="fs-6 px-3 text-light">Subscriptions</h4>
  <SubscriberList Subscriptions="@SubscriptionState.Subscriptions" />
</div>

@code {
  protected override void OnInitialized() {
    SubscriptionState.OnChange += StateHasChanged;
  }

  protected override async Task OnInitializedAsync()
  {
    try
    {
      SubscriptionState.Subscriptions = await SubscriptionService.GetSubscriptions();
    }
    catch (Exception)
    {
      ToastService.ShowError("Error getting subscriptions");
    }
  }

  public void Dispose()
  {
    SubscriptionState.OnChange -= StateHasChanged;
  }
} 
