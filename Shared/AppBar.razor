@using AdrianTube2.Services
@using AdrianTube2.Shared.UI
@using AdrianTube2.state
@inject AuthService _authService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IToastService ToastService
@inject MovieService MovieService
@inject StateContainer StateContainer
@using Blazored.Toast.Configuration

<nav class="nav position-fixed top-0 end-0 w-100">
    <div class="bg-primary d-flex justify-content-between p-2 w-100">
        <div class="d-flex gap-2">
            <div class="container-fluid">
                <a class="navbar-brand text-light" href="">AdrianTube2</a>
            </div>

            <input @oninput="SearchMovies" placeholder="Search for movie" class="form-control rounded" />
            <IconButton Variant="IconButton.ButtonVariant.Secondary" class="d-flex justify-content-center align-items-center">
                @if (IsLoading) {
                    <Loader />
                } else {
                    <i class="oi oi-magnifying-glass"></i>
                }
            </IconButton>
        </div>
        <div>
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex align-items-center gap-2 text-light h-100">
                        <IconButton title="Add movie" style="width: 30px; height: 30px;" Variant="IconButton.ButtonVariant.None" class="d-flex justify-content-center align-items-center text-light rounded-circle" @onclick="ShowAddMovieModal">
                            <i class="oi oi-plus"></i>
                        </IconButton>
                        <p>Hello <strong>@context.User.Identity?.Name!</strong></p>
                        <Button Variant="Button.ButtonVariant.Secondary" @onclick="Logout">Logout</Button>
                    </div>
                    <BlazoredToasts Position="ToastPosition.BottomRight" Timeout="10" />
                    <NewMovieModal IsShow="@IsShowMovieModal" IsShowMovieModalChanged="@((bool value) => IsShowMovieModal = value)" />
                </Authorized>
                <NotAuthorized>
                    <div class="d-flex align-items-center ">
                        <Button Variant="Button.ButtonVariant.Secondary" @onclick="Login">Login</Button>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

@code {
    public bool IsShowMovieModal { get; set; }

    private System.Threading.Timer _debounceTimer;
    bool IsLoading { get; set; } = false;

    private void Debounce(Action action, int delayMilliseconds = 500)
    {
        _debounceTimer?.Dispose();
        _debounceTimer = new System.Threading.Timer(_ =>
        {
            action();
        }, null, delayMilliseconds, System.Threading.Timeout.Infinite);
    }

    private async Task SearchMovies(ChangeEventArgs e)
    {
        var searchQuery = e.Value.ToString();
        IsLoading = true;
        try
        {
            var movies = await MovieService.GetMoviesByTitle(searchQuery);
            StateContainer.Movies = movies;
        }
        catch {
            ToastService.ShowError("Something went wrong while searching for movies");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task Logout()
    {
        try
        {
            await ((CustomAuthenticationStateProvider)_authenticationStateProvider).Logout();
            ToastService.ShowSuccess("Logout successful");
        }
        catch (System.Exception)
        {
            ToastService.ShowError("Logout failed");
        }
    }

    private void ShowAddMovieModal()
    {
       IsShowMovieModal = true;
    }

    private void Login() {
        _authService.RedirectToLoginPage();
    }
}