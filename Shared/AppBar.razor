@using Blazored.Toast.Configuration

@inject IAuthService AuthService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IToastService ToastService
@inject IMovieService MovieService
@inject IMovieState MovieState
@inject IJSRuntime JSRuntime
@implements IDisposable

<nav id="appbar" class="nav w-100">
    <div class="bg-primary d-flex justify-content-between p-2 w-100">
        <div class="d-flex gap-2 align-items-center">
            <a class="text-light text-uppercase fw-bolder text-decoration-none bg-secondary p-2 rounded logo" href="">AdrianTube2</a>
        </div>
        <div>
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex align-items-center gap-2 text-light h-100">
                        <SearchMovie ContainerClass="d-none d-sm-flex me-4 ms-4" />
                        <IconButton title="Add movie" style="width: 30px; height: 30px;" Variant="IconButton.ButtonVariant.None" class="d-flex justify-content-center align-items-center text-light rounded-circle" @onclick="ShowAddMovieModal">
                            <i class="oi oi-plus"></i>
                        </IconButton>
                        <p>Hello <strong>@context.User.Identity?.Name!</strong></p>
                        <Button Variant="Button.ButtonVariant.Secondary" @onclick="Logout">
                            <i class="oi oi-account-logout"></i>
                        </Button>
                    </div>
                    <NewMovieModal IsShow="@IsShowMovieModal" IsShowMovieModalChanged="@((bool value) => IsShowMovieModal = value)" />
                </Authorized>
                <NotAuthorized>
                    <div class="d-flex align-items-center ">
                        <Button Variant="Button.ButtonVariant.Secondary" @onclick="Login">
                            <i class="oi oi-account-login"></i>
                        </Button>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
    <BlazoredToasts Position="@ToastPositionName" Timeout="5" />
</nav>

@code {
    public bool IsShowMovieModal { get; set; }
    ToastPosition ToastPositionName { get; set; } = ToastPosition.BottomRight;
    bool IsLoading { get; set; } = false;
    DotNetObjectReference<AppBar> _objectReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setToastPositionHelper", _objectReference);
        }
    }

    [JSInvokable]
    public void SetToastPosition(string position)
    {
        if (string.IsNullOrEmpty(position))
        {
            return;
        }

        if (position == "bottom-right") {
            ToastPositionName = ToastPosition.BottomRight;
        }

        if (position == "top-center") {
            ToastPositionName = ToastPosition.TopCenter;
        }

        StateHasChanged();
    }

    private async Task Logout()
    {
        try
        {
            await ((CustomAuthenticationStateProvider)_authenticationStateProvider).Logout();
            ToastService.ShowSuccess("Logout successful");
        }
        catch (Exception)
        {
            ToastService.ShowError("Logout failed");
        }
    }

    private void ShowAddMovieModal()
    {
       IsShowMovieModal = true;
    }

    private void Login() {
        AuthService.RedirectToLoginPage();
    }

    public async void Dispose()
    {
        await JSRuntime.InvokeVoidAsync("toastPositionHelper.removeResizeEvent");
        _objectReference?.Dispose();
    }
}